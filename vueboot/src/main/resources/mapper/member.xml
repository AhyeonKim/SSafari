<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ssafy.member">

	<!-- </select> -->

	<select id="checkLogin" resultType="com.ssafy.edu.vue.dto.Member" parameterType="com.ssafy.edu.vue.dto.Member">
		select memberid, email, name, username, signupdate, auth, githubid, locationid, unit, social, img from members where email=#{email} and password=hex(aes_encrypt(#{password}, 'key'))
	</select>
	
	<select id="getMemberList" resultType="com.ssafy.edu.vue.dto.Member">
		select memberid, email, name, username, signupdate, auth, githubid, locationid, unit, social, img from members where delflag=0 order by memberid
	</select>
	
	<select id="getMember" resultType="com.ssafy.edu.vue.dto.Member" parameterType="java.lang.Integer">
		select memberid, email, name, username, signupdate, auth, githubid, locationid, unit, social, img from members where memberid=#{memberid}
	</select>
	
	<delete id="deleteMember" parameterType="java.lang.Integer">
		update members set delflag=1 where memberid=#{memberid}
	</delete>
	
	<insert id="addMember" parameterType="com.ssafy.edu.vue.dto.Member">
		insert into
		members(email, password, name, username, signupdate, social)
		values(#{email},hex(aes_encrypt(#{password}, 'key')),#{name},#{username},now(),#{social})
	</insert>
	
	<update id="updateMember"
		parameterType="com.ssafy.edu.vue.dto.Member">
		update members set
		username=#{username},
		githubid=#{githubid},
		img=#{img}
		where
		memberid=#{memberid}
	</update>
	
	<select id="checkEmail" resultType="java.lang.Integer" parameterType="java.lang.String">
		select count(*) from members where email=#{email}
	</select>
	
	<select id="checkUsername" resultType="java.lang.Integer" parameterType="java.lang.String">
		select count(*) from members where username=#{username}
	</select>
	
	<select id="checkUsers" resultType="java.lang.Integer">
		select count(*) from members where delflag=0
	</select>
	
	<update id="updateMemberAuth" parameterType="com.ssafy.edu.vue.dto.Member">
		update members set
		auth=#{auth}
		where
		memberid=#{memberid}
	</update>
	
	<select id="checkDelflag" resultType="java.lang.Integer" parameterType="java.lang.String">
		select delflag from members where email=#{email}
	</select>
	
	<insert id="authRequest" parameterType="com.ssafy.edu.vue.dto.AuthRequest">
		insert into
		authrequest(memberid, img, locationid, unit)
		values(#{memberid},#{img},#{locationid},#{unit})
	</insert>
	
	<update id="updatePassword" parameterType="com.ssafy.edu.vue.dto.Member">
		update members set
		password=hex(aes_encrypt(#{password}, 'key'))
		where
		memberid=#{memberid}
	</update>
	
	<delete id="deleteAuthRequest" parameterType="java.lang.Integer">
		delete from authrequest where memberid=#{memberid}
	</delete>
	
	<select id="getAuthRequestList" resultType="com.ssafy.edu.vue.dto.AuthRequest">
		select a.memberid, m.name, a.img, a.locationid, l.location, a.unit  from authrequest a, location l, members m where m.memberid=a.memberid and l.id=a.locationid
	</select>
	
	<select id="getAuthRequest" resultType="com.ssafy.edu.vue.dto.AuthRequest" parameterType="java.lang.Integer">
		select a.memberid, m.name, a.img, a.locationid, l.location, a.unit  from authrequest a, location l, members m where m.memberid=a.memberid and l.id=a.locationid and a.memberid=#{memberid} 
	</select>
	
	<update id="updateLocationUnit" parameterType="com.ssafy.edu.vue.dto.AuthRequest">
		update members set
		locationid=#{locationid},
		unit=#{unit}
		where
		memberid=#{memberid}
	</update>
	
	<select id="getMemberLikePost" parameterType="java.lang.Integer" resultType="com.ssafy.edu.vue.dto.LikePost">
		( select j.id postid, j.name title, (4) as categoryid, r.name categoryname, j.memberid, m.username, j.anonymous, j.created_at 
		from jmt j, likepost l, category r, members m
		where l.categoryid=4 and j.id=l.postid and l.memberid=#{memberid} and r.id=l.categoryid and j.memberid=m.memberid
		union
		select c.id postid, c.title, (3) as categoryid, r.name categoryname, c.memberid, m.username,c.anonymous, c.created_at 
		from codereview c, likepost l, category r, members m
		where l.categoryid=3 and c.id=l.postid and l.memberid=#{memberid} and r.id=l.categoryid and c.memberid=m.memberid
		union
		select p.postid postid, p.title, l.categoryid, r.name categoryname, p.memberid, m.username,p.anonymous, p.created_at 
		from posts p, likepost l, category r, members m
		where p.categoryid=l.categoryid and p.postid=l.postid and l.memberid=#{memberid} and r.id=l.categoryid and p.memberid=m.memberid ) 
		order by created_at
	</select>
	
</mapper>
