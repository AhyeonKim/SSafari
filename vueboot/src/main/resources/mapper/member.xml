<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ssafy.member">

	<!-- </select> -->

	<select id="checkLogin" resultType="com.ssafy.edu.vue.dto.Member" parameterType="com.ssafy.edu.vue.dto.Member">
		SELECT MEMBERID, EMAIL, NAME, USERNAME, SIGNUPDATE, AUTH, GITHUBID, LOCATIONID, UNIT, SOCIAL, IMG FROM MEMBERS WHERE EMAIL=#{email} AND PASSWORD=hex(aes_encrypt(#{password}, 'key'))
	</select>
	
	<select id="getMemberList" resultType="com.ssafy.edu.vue.dto.Member">
		SELECT MEMBERID, EMAIL, NAME, USERNAME, SIGNUPDATE, AUTH, GITHUBID, LOCATIONID, UNIT, SOCIAL, IMG FROM MEMBERS WHERE DELFLAG=0 ORDER BY MEMBERID
	</select>
	
	<select id="getMember" resultType="com.ssafy.edu.vue.dto.Member" parameterType="java.lang.Integer">
		SELECT MEMBERID, EMAIL, NAME, USERNAME, SIGNUPDATE, AUTH, GITHUBID, LOCATIONID, UNIT, SOCIAL, IMG FROM MEMBERS WHERE MEMBERID=#{memberid}
	</select>
	
	<delete id="deleteMember" parameterType="java.lang.Integer">
		UPDATE MEMBERS SET DELFLAG=1 WHERE MEMBERID=#{memberid}
	</delete>
	
	<insert id="addMember" parameterType="com.ssafy.edu.vue.dto.Member">
		INSERT INTO
		MEMBERS(EMAIL, PASSWORD, NAME, USERNAME, SIGNUPDATE, SOCIAL)
		VALUES(#{email},hex(aes_encrypt(#{password}, 'key')),#{name},#{username},now(),#{social})
	</insert>
	
	<update id="updateMember"
		parameterType="com.ssafy.edu.vue.dto.Member">
		UPDATE MEMBERS SET
		USERNAME=#{username},
		GITHUBID=#{githubid},
		IMG=#{img}
		WHERE
		MEMBERID=#{memberid}
	</update>
	
	<select id="checkEmail" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT COUNT(*) FROM MEMBERS WHERE EMAIL=#{email}
	</select>
	
	<select id="checkUsername" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT COUNT(*) FROM MEMBERS WHERE USERNAME=#{username}
	</select>
	
	<select id="checkUsers" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM MEMBERS WHERE DELFLAG=0
	</select>
	
	<update id="updateMemberAuth" parameterType="com.ssafy.edu.vue.dto.Member">
		UPDATE MEMBERS SET
		AUTH=#{auth}
		WHERE
		MEMBERID=#{memberid}
	</update>
	
	<select id="checkDelflag" resultType="java.lang.Integer" parameterType="java.lang.String">
		SELECT DELFLAG FROM MEMBERS WHERE EMAIL=#{email}
	</select>
	
	<insert id="authRequest" parameterType="com.ssafy.edu.vue.dto.AuthRequest">
		INSERT INTO
		AUTHREQUEST(MEMBERID, IMG, LOCATIONID, UNIT)
		VALUES(#{memberid},#{img},#{locationid},#{unit})
	</insert>
	
	<update id="updatePassword" parameterType="com.ssafy.edu.vue.dto.Member">
		UPDATE MEMBERS SET
		PASSWORD=hex(aes_encrypt(#{password}, 'key'))
		WHERE
		MEMBERID=#{memberid}
	</update>
	
	<delete id="deleteAuthRequest" parameterType="java.lang.Integer">
		DELETE FROM AUTHREQUEST WHERE MEMBERID=#{memberid}
	</delete>
	
	<select id="getAuthRequestList" resultType="com.ssafy.edu.vue.dto.AuthRequest">
		SELECT A.MEMBERID, M.NAME, A.IMG, A.LOCATIONID, L.LOCATION, A.UNIT  FROM AUTHREQUEST A, LOCATION L, MEMBERS M WHERE M.MEMBERID=A.MEMBERID AND L.ID=A.LOCATIONID
	</select>
	
	<select id="getAuthRequest" resultType="com.ssafy.edu.vue.dto.AuthRequest" parameterType="java.lang.Integer">
		SELECT A.MEMBERID, M.NAME, A.IMG, A.LOCATIONID, L.LOCATION, A.UNIT  FROM AUTHREQUEST A, LOCATION L, MEMBERS M WHERE M.MEMBERID=A.MEMBERID AND L.ID=A.LOCATIONID AND A.MEMBERID=#{memberid} 
	</select>
	
	<update id="updateLocationUnit" parameterType="com.ssafy.edu.vue.dto.AuthRequest">
		UPDATE MEMBERS SET
		LOCATIONID=#{locationid},
		UNIT=#{unit}
		WHERE
		MEMBERID=#{memberid}
	</update>
	
	<select id="getMemberLikePost" parameterType="java.lang.Integer" resultType="com.ssafy.edu.vue.dto.LikePost">
		( SELECT J.ID, J.NAME TITLE, (4) AS CATEGORYID, L.MEMBERID, J.CREATED_AT FROM JMT J, LIKEPOST L
		WHERE L.CATEGORYID=4 AND J.ID=L.POSTID AND L.MEMBERID=#{memberid}
		UNION
		SELECT C.ID, C.TITLE, (3) AS CATEGORYID, L.MEMBERID, C.CREATED_AT FROM CODEREVIEW C, LIKEPOST L
		WHERE L.CATEGORYID=3 AND C.ID=L.POSTID AND L.MEMBERID=#{memberid}
		UNION
		SELECT P.POSTID, P.TITLE, L.CATEGORYID, L.MEMBERID, P.CREATED_AT FROM POSTS P, LIKEPOST L
		WHERE P.CATEGORYID=L.CATEGORYID AND P.POSTID=L.POSTID AND L.MEMBERID=#{memberid} ) 
		ORDER BY CREATED_AT
	</select>
	
</mapper>
